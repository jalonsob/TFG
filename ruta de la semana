[*]: realización obligatoria
-: sin hacer
—-: mirado y sin hacer
+: hecho
++: extra/semimencionado hecho
*: notas especiales

bibliotecas de visualización de datos
——————————————————

[*] chart.js
	

+Desempolvar javascript
	*code cademy
	o pillar de un fichero json
+Buscar bibliotecas dashboard open source
+Buscar scrum
-Empezar a usar plantilla en latex para el proyecto
+bootstrap
+hacer ejemplo con higcharts
	*Me permite modificar el chart a mi gusto y como yo quiera

+Subir todo a Github
-Desplegar heroku


———————————————

Títulos:

[*] Aplicación HTML5 para mostrar información de desarrollo de software.
Sistema de información web para la visualización de software.

+Leer la normativa de fin de grado.
+Enviar url del repositorio.
+Buscar github pages
-Mirar fechas de entrega del proyecto.
	*no vienen especificadas	
+Mirar bibliotecas que van a mandar
--Mirar angular.
	*necesitamos tutoriales de referencia de angular
-yui interfaz de usuario javascript
+recordar plantilla en latex
+documentar bibliotecas
+subir también a Github la memoria
+json para trabajar

Día 6 de noviembre jueves. A las 10h.

———————————

+Crear gráficas de forma dinámica
+Destruir gráficas de forma dinamica
+Escribir alguna parte de la memoria
+Seleccionar los datos que queramos de las gráficas 

Jueves 20 a las 10h

——————————————————

+Lista de tecnologías que estamos usando para memoria documentadas
+Documentar el backlog, los resultados y los requisitos del cliente
	Crear gráficas personalizadas
	Compartir gráficas personalizadas
+Capturas de pantalla para la memoria
+Documentar al menos el primer ciclo
+Explorar gridster
-Que el código de creación sea el mismo de configuración
--Intentar relacionar gráficas (click en zonas)
—-Mirar angular como opcional, y grister con angular

Martes 2 a las 10h

——————————————————

+Manejar función on para manejar eventos ajenos a la gráfica de higth charts
	Puede ser sacar una copia
+Opciones: crear gráfica simple, mostrar opciones.
+Crear backlog para la siguiente iteración informando de todo lo que hice hasta la fecha
+Probarlo con grister
+Buscar como guardar el estado 

Jueves 18 a las 10h
——————————————————

+Hacerlo asincrono el json

——Dinamico——

+Hacer el cargador de jsones (preguntar)
	función dentro del json para ver cuando esté disponible.
	Mirar función json de jquery
	

—-Estatico—

+Mejorar interfaz mas visible
+Pensar nuevos cambios para proponer
	Nueva relación entre edades y commits a lo largo del tiempo en una gráfica
	Intentar crear el draggable y el dropable de gridster
	Empezar con el menú de guardado y del servidor
+Reestructuración del código
++Mover un widget de un gridster a otro

Martes o Jueves de la siguiente semana

—————————————

Martes a las 11:30

- Google drive explorar.
+ Servidor django para guardar las cosas
- Probar a guardar en github
+ Guardar las métricas de cada gráfica

—————————

Hablar con Alicia Nieto en biblioteca
las chicas de investigación Andrea y Gema Según se sube a la segunda planta el segundo despacho de la izquierda

+Todos los ficheros estáticos los meto en /, mira la hoja, cambia las urls
+cambiar el “..” del javascript
-Crear todas las nuevas url de peticiones db

Martes a las 10:00

——————————————

+Reajustar el codigo
+Aprender a sincronizar eventos en divs
+Sincronizar la creación de varias gráficas y crear ya la caché con los 3 estados

Martes a las 9:30


——————————————

++Reestructurar el getjson (tema de crear antes los dashboards)
	*No se puede hacer, contradice el pedido de clickar y reproducir
+cambiar lo de las urls para que sea para cualquiera
+panel se muestra solo cuando se clicle
+comprobar que me llega un numero en la url
	*No se puede, python recrea que obligatoriamente debe ser un numero u otra cosa
	-Arreglar esto con python
++Ids no repetidas
+panel por defecto
-Mirar el aplanamiento de gráficas y el objeto de cada panel y gráfica
-Mirar el arrastrar gráficas
++Escribir ciclo 3 y recordarlo
-Mirar Heroku

Martes 17 a las 14:00
